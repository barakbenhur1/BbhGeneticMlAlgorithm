// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios14.3-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BbhGMl
@_exported import BbhGMl
import Swift
import UIKit
public protocol Chromosome {
  func printDescription()
  var extra: Any? { get set }
}
public protocol DNA : Swift.Decodable, Swift.Encodable, Swift.Hashable {
  static func empty() -> Self
  init(copy: Self)
  func length() -> Swift.Int
  func calcFitness(val: Self?, best: CoreGraphics.CGFloat) -> (val: CoreGraphics.CGFloat, extraDimension: CoreGraphics.CGFloat)
  func mutate(rate: CoreGraphics.CGFloat) -> Self
  func find(target: Self, count: CoreGraphics.CGFloat) -> Swift.Bool
  func elementsEqual(_ other: Self) -> Swift.Bool
  func equalTo(byEndGoal other: Self) -> Swift.Bool
  static func == (lhs: Self, rhs: Self) -> Swift.Bool
  static func != (lhs: Self, rhs: Self) -> Swift.Bool
  static func random(length: Swift.Int, extra: Any?) -> Self
  static func += (lhs: inout Self, rhs: Self)
  subscript(offset: Swift.Int) -> Self { get set }
  var isCompletedTask: ((Self) -> (Swift.Bool))? { get set }
  func distanceTo(target: Self) -> CoreGraphics.CGFloat
  func cleanBetweenGens()
  var extra: Any? { get set }
}
public protocol PollUpdates {
  func update(guess: Swift.String, string: Swift.String, lettersIndexs: [Swift.Int], done: Swift.Bool)
}
public class MlPoll<T> where T : BbhGMl.DNA {
  public var finish: ((BbhGMl.Agent<T>, T, [Swift.Int], Swift.Bool) -> ())?
  public var generationChange: ((Swift.Bool, @escaping () -> ()) -> ())?
  public var decisionHandler: (Swift.Int, Swift.Int, (queryVal: CoreGraphics.CGFloat, otherVal: CoreGraphics.CGFloat), CoreGraphics.CGFloat) -> (Swift.Bool)
  public var fitnessHandler: ((T?) -> (CoreGraphics.CGFloat, CoreGraphics.CGFloat))?
  public var stopHandele: (() -> ())?
  public var delegate: BbhGMl.PollUpdates?
  public init(num: Swift.Int = 100, mutatingRate: CoreGraphics.CGFloat = 0.1, lifeSpanBundle bundle: (lifeSpan: CoreGraphics.CGFloat, moveSpeed: CoreGraphics.CGFloat, trackSolveTime: Swift.Bool)? = nil)
  public func saveGeneration(key: Swift.String) -> Swift.Bool
  public func loadGeneration(key: Swift.String) -> Swift.Bool
  public func getAgentsGetters() -> [(Swift.Int) -> (BbhGMl.Agent<T>?)]
  public func stop()
  public func `continue`()
  public func getAgents() -> [BbhGMl.Agent<T>]
  public func getGeneration() -> Swift.Int
  public func getBest() -> BbhGMl.Agent<T>?
  public func sortAgents()
  public func getUpdatedData() -> (guess: T, val: T, lettersIndexs: [Swift.Int], done: Swift.Bool)
  public func start(target: T, lengthLimit: Swift.Int = 0, extra: Any...)
  public func checkIfShouldKeep(agent: BbhGMl.Agent<T>)
  public func resetAgents()
  public func cleanIfNeeded()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Agent<T> : Swift.Decodable & Swift.Encodable where T : BbhGMl.DNA {
  public var fitnessVal: CoreGraphics.CGFloat? {
    get
    set
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func empty() -> BbhGMl.Agent<T>
  public func toString() -> Swift.String
  public static func == (lhs: BbhGMl.Agent<T>, rhs: BbhGMl.Agent<T>) -> Swift.Bool
  public static func != (lhs: BbhGMl.Agent<T>, rhs: BbhGMl.Agent<T>) -> Swift.Bool
  public func getData() -> T?
  public func checkIfShouldKeep()
  @objc deinit
}
